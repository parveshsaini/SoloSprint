// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String   @unique
//   emailVerified DateTime?
//   image         String?
//   projects      Project[]
//   sprints       Sprint[]
//   tasks         Task[]
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   accounts      Account[]
//   sessions      Session[]
// }

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @db.DateTime(0)
  updatedAt         DateTime @default(now()) @db.DateTime(0)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  Moderator
  User
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  projects              Project[]
  sprints               Sprint[]
  tasks                 Task[]
  role                  UserRole               @default(User)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @db.DateTime(0)
  updatedAt             DateTime               @default(now()) @db.DateTime(0)
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id         String   @id @default(cuid())
  title      String
  owner      User     @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail String
  sprints    Sprint[]
  imageUrl   String?
  createdAt  DateTime @default(now())
}

model Sprint {
  id         String       @id @default(cuid())
  title      String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  tasks      Task[]
  status     SprintStatus @default(PLANNED)
  owner      User         @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail String
  startDate  DateTime
  endDate    DateTime
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus
  sprint      Sprint     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    String
  owner       User       @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail  String
  startedAt   DateTime?
  finishedAt  DateTime?
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}
