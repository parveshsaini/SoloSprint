// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  projects      Project[]
  sprints       Sprint[]
  tasks         Task[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}



model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Project {
  id       String   @id @default(cuid())
  title    String 
  owner    User     @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail  String
  sprints  Sprint[]
  imageUrl String?
  createdAt DateTime @default(now())
}

model Sprint {
  id        String   @id @default(cuid())
  title     String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]
  status    SprintStatus @default(PLANNED)
  owner    User     @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail  String
  startDate DateTime
  endDate   DateTime
}

model Task {
  id        String   @id @default(cuid())
  title     String
  description String?
  status    TaskStatus 
  sprint    Sprint   @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId  String
  owner    User     @relation(fields: [ownerEmail], references: [email], onDelete: Cascade)
  ownerEmail  String
  startedAt DateTime? 
  finishedAt DateTime?
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}
